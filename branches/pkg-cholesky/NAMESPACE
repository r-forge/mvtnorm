
useDynLib(mvtnorm, .registration = TRUE, .fixes = "mvtnorm_")

importFrom("stats",
	   pnorm, qnorm, rnorm, runif,
	   pt, qt,
	   rchisq, uniroot,
	   cov2cor, optim, coef, glm, pcauchy, qcauchy, predict, quasi)
importFrom("methods", hasArg)

export(rmvnorm, dmvnorm, pmvnorm, pmvt, rmvt, qmvnorm, qmvt, dmvt,
       GenzBretz, Miwa, TVPACK, ltMatrices, Tcrossprod, Crossprod, diagonals, 
       chol2cov, invchol2chol, chol2invchol, invchol2cov, 
       invchol2pre, chol2pre, Dchol, invcholD, chol2cor, invchol2cor,
       invchol2pc, chol2pc, "diagonals<-", vectrick,
       marg_mvnorm, cond_mvnorm, Mult, lmvnorm, smvnorm)

S3method("as.array", "ltMatrices")
S3method("as.array", "syMatrices")
S3method("[", "ltMatrices")
S3method("[", "syMatrices")
S3method("print", "ltMatrices")
S3method("print", "syMatrices")
S3method("dim", "ltMatrices")
S3method("dimnames", "ltMatrices")
S3method("names", "ltMatrices")
S3method("dim", "syMatrices")
S3method("dimnames", "syMatrices")
S3method("names", "syMatrices")
S3method("solve", "ltMatrices")
S3method("diagonals", "ltMatrices")
S3method("diagonals", "syMatrices")
S3method("diagonals", "matrix")
S3method("diagonals<-", "ltMatrices")
S3method("diagonals<-", "syMatrices")
S3method("chol", "syMatrices")
S3method("aperm", "ltMatrices")
